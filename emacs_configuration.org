#+TITLE: Emacs Configuration File
#+AUTHOR: Marco Cantoro
#+EMAIL: marco.cantoro92@outlook.it
#+STARTUP: overview
#+OPTIONS: toc:2 num:3

* Package Management
** Configure =use-package=
Used to install and configure emacs packages. The =init.el= file includes
the initial setup for =package.el= and ensure that =use-package= is installed.
Look the [[https://github.com/jwiegley/use-package][use-package repository]] for detailed information on the package.

*** =use-package=
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package-ensure))
  (setq use-package-always-ensure t)
#+end_src

*** dependencies for =use-package=
Additional packages used to configure package with =use-package=.
#+begin_src emacs-lisp
  (require 'bind-key)
  (use-package diminish)
#+end_src

** Configure =auto-package-update=
This package provides functionality for automatically updating your Emacs
packages periodically.
Look the [[https://github.com/rranelli/auto-package-update.el][auto-package-update repository]] for detailed information on the package.
#+begin_src emacs-lisp
  (use-package auto-package-update
    :init
    (setq auto-package-update-interval 14)
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-delete-old-versions t)
    :hook
    ((auto-package-update-before) . (lambda () (message "I will update packages now!")))
    :config
    (auto-package-update-maybe))
#+end_src

** Configure =auto-compile=
Re-compile a source file when the respective byte code file
already exists but is outdated.
Look the [[https://github.com/emacscollective/auto-compile][auto-compile repository]] for detailed information on the package.
#+begin_src emacs-lisp
  (use-package auto-compile
    :init
    (setq load-prefer-newer t)
    :config
    (auto-compile-on-load-mode))
#+end_src

* Evil Mode
** =evil-mode=
Evil is an extensible *vi* layer for Emacs. It emulates the main feature of
Vim, and provide facilities for writing custom extensions.
Look the [[https://github.com/emacs-evil/evil][evil repository]] for detailed information.

*** [[https://github.com/emacsorphanage/key-chord][=key-chord=]]
Useful to define mappings formed by two key presses.
#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (setq key-chord-two-keys-delay 0.3)
    :config
    (key-chord-mode 1))
#+end_src

*** =undo-tree= for vi undo-redo style and for changes visualization
Look the [[https://github.com/apchamberlain/undo-tree.el][undo-tree repository]] for detailed information.
#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
#+end_src

*** =goto-chg= evil package to implement =goto-last-change= and =goto-last-change-reverse=
#+begin_src emacs-lisp
  (use-package goto-chg
    :config
    (global-set-key [(control ?.)] 'goto-last-change)
    (global-set-key [(control ?,)] 'goto-last-change-reverse))
#+end_src

*** =evil=
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-i-jump t)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-shift-width 2)
    :config
    (evil-mode 1)
    (key-chord-define evil-insert-state-map (kbd "jk") 'evil-normal-state)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-set-initial-state 'help-mode 'emacs)
    (evil-set-initial-state 'org-agenda-list-mode 'emacs)
    (evil-set-initial-state 'neotree-mode 'emacs)
    (evil-set-initial-state 'dired-mode 'emacs))
#+end_src

** =evil-collection= provides evil-friendly bindings for many modes.
Look the [[https://github.com/emacs-evil/evil-collection][evil-collection repo]] for detailed information.
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-mode-list
          '(ag dired dashboard magit man))
    :config
    (evil-collection-init))
#+end_src

** additional evil plugins
Additional text operators for vim (mainly tpope plugins ported to emacs)

*** =evil-surround=
Look the [[https://github.com/emacs-evil/evil-surround][evil-surround repository]] for detailed information.
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** =evil-commentary=
Look the [[https://github.com/linktohack/evil-commentary][evil-commentary repository]] for detailed information.
#+begin_src emacs-lisp
  (use-package evil-commentary
    :diminish evil-commentary-mode
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

* UI Preferences

** Tweak window look
Clean up unecessary items that stole useful space.
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

** Buffer tweaks

*** Pretty simbols, mainly lambdas
Similar to vim concealing
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

*** Remove cursor blinking
I find it annoying.
#+Begin_src emacs-lisp
 (blink-cursor-mode 0)
#+end_src

** Scroll conservatively
This changes scrolling behavior to only scroll as far as point goes.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Font Settings
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Operator Mono Lig Nerd Font" :height 95 :weight 'normal :width 'normal)
  (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :height 90)
  (set-face-attribute 'variable-pitch nil :font "Operator Mono Lig Nerd Font" :height 95 :weight 'semi-light :slant 'oblique)
#+end_src

** Save previous cursor position
#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

** Modeline additions
#+begin_src emacs-lisp
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

** Visually indicate empty lines and trailing whitespace
#+begin_src emacs-lisp
  (toggle-indicate-empty-lines t)
  (setq-default show-trailing-whitespace t)
#+end_src

** Relative numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (setq display-line-numbers-width-start t)
  (setq-default display-line-numbers-width 4)

  ;; Disable line numbers for some modes
  (dolist (mode
           '(term-mode-hook
             shell-mode-hook
             eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Highlight the current line
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

** Theme settings
Choose themes and apply one
#+begin_src emacs-lisp
  (use-package ayu-theme
    ;; :config
    ;; (load-theme 'ayu-dark t)
    )

  (use-package leuven-theme
    ;; :config
    ;; (load-theme 'leuven-dark t)
    )

  (load-theme 'leuven t)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 10)
    (setq doom-modeline-buffer-file-name-style 'truncate-all)
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-unicode-fallback t)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-indent-info t)
    (setq doom-modeline-modal-icon t)
    (setq doom-modeline-env-version t)
    (doom-modeline-mode 1))
#+end_src

** Rainbow delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Separated Custom File
#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/emacs_custom.el")
  (load custom-file)
#+end_src

* Sensible Defaults

** Increase garbage collection treshold
Allow 20MB of memory instead of the default 0.76MB. This means that GC runs less often,
which speed up some operations.
#+begin_src emacs-lisp
  (setq gc-cons-threshold 20000000)
#+end_src

** Remove trailing white-spaces upon saving
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Treat CamelCaseWords as separate words in every programming mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** Always follow symlinks when opening files
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

** Make executable file that starts with #!(shebang) upon saving
#+begin_src emacs-lisp
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Avoid two spaces after periods.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Prompt for creation of parent directories on save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook
	    (lambda ()
	      (when buffer-file-name
		(let ((dir (file-name-directory buffer-file-name)))
		  (when (and (not (file-exists-p dir))
			     (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
		    (make-directory dir t))))))
#+end_src

** Change highlighted area
Apply changes to highlighted area, it works similar to replace mode for a visual selection
but in emacs:

- =transient-mark-mode= (enabled by default)
#+begin_src emacs-lisp
  (transient-mark-mode t)
#+end_src

- =delete-selection-mode= (disabled by default)
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

** =require-final-newline=
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Shorten confirmation
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Always use syntax highlighting if possible
#+begin_src emacs-lisp
  (global-font-lock-mode t)
#+end_src

** Quiet start-up
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+end_src

** =ls= options
| Option           | Meaning              |
|------------------+----------------------|
| -l               | long listing         |
| -a               | list hidden entries  |
| -h               | humand readable size |
| --sort=extension | sort by extension    |

#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-alh --sort=extension")
#+end_src

** Refresh buffer when the file is changed
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Visible bell instead of ringing
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** MatchPairs
#+begin_src emacs-lisp
  (show-paren-mode t)
  ;; (setq show-paren-delay 0.01)
#+end_src

** Line length and lenght column
#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (global-display-fill-column-indicator-mode t)
#+end_src

** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.cache/emacs/backup")))
#+end_src

** Better Escape
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Quickly visit Emacs configuration
I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.
#+begin_src emacs-lisp
  (defun mct/visit-emacs-config ()
    (interactive)
    (find-file "~/.config/emacs/emacs_configuration.org"))

  (global-set-key (kbd "C-c e") 'mct/visit-emacs-config)
#+end_src

* Utilities Packages

** Company
[[https://company-mode.github.io][=company=]] is a text completion framework for Emacs.
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (after-init . global-company-mode)
    :config
    (define-key evil-insert-state-map (kbd "C-n") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src

** Command Log Mode
[[https://github.com/lewang/command-log-mode][=command-log-mode=]] show event history and command history of some or all buffers.
#+begin_src emacs-lisp
  (use-package command-log-mode
    :diminish command-log)
#+end_src

** Helpful
Look [[https://github.com/Wilfred/helpful][here ]]for the repository
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ("C-c C-d" . #'helpful-at-point))
#+end_src

** Ivy, Swiper and Counsel
Look [[https://github.com/abo-abo/swiper][here]] for the repository

*** Ivy and Swiper
=ivy= a generic completion mechanism for Emacs and =swiper= an Ivy enhanced
alternative to isearch
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :init
    (setq enable-recursive-minibuffers t)
    (setq ivy-wrap t)
    (setq ivy-height 10)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind (("C-s" . swiper-isearch)
           ("C-x b" . ivy-switch-buffer)
           ("C-c v" . ivy-push-view)
           ("C-c V" . ivy-pop-view)
           ("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("C-n" . ivy-next-line)
           ("C-p" . ivy-previous-line)
           ("M-<" . ivy-beginning-of-buffer)
           ("M->" . ivy-end-of-buffer)
           ("C-v" . ivy-scroll-up-command)
           ("M-v" . ivy-scroll-down-command)
           ("RET" . ivy-done)
           ("C-m" . ivy-done)
           ("M-o" . ivy-dispatching-done)
           ("TAB" . ivy-partial-or-done)
           ("C-j" . ivy-alt-done)
           ("C-M-j" . ivy-immediate-done)
           ("C-M-m" . ivy-call)
           ("C-M-o" . ivy-dispatching-call)
           ("C-M-n" . ivy-next-line-and-call)
           ("C-M-p" . ivy-previous-line-and-call)
           ("M-n" . ivy-next-history-element)
           ("M-p" . ivy-previous-history-element)
           ("M-i" . ivy-insert-current)
           ("M-j" . ivy-yank-word)
           ("S-SPC" . ivy-restrict-to-matches)
           ("C-r" . ivy-reverse-i-search))
    :config
    (ivy-mode 1))
#+end_src

*** Counsel
=counsel= a collection of Ivy-enhanced versions of common Emacs commands.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("M-y" . counsel-yank-pop)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-h l" . counsel-find-library)
    ("C-h s" . counsel-info-lookup-symbol)
    ("C-c b" . counsel-bookmark)
    ("C-c c" . counsel-compile)
    ("C-c g" . counsel-git)
    ("C-c f" . counsel-fzf)
    ("C-c F" . counsel-org-file)
    ("C-c j" . counsel-git-grep)
    ("C-c J" . counsel-file-jump)
    ("C-c L" . counsel-git-log)
    ("C-c m" . counsel-linux-app)
    ("C-c O" . counsel-outline))
    :config
    (setq counsel-ag-base-command "ag --hidden --vimgrep %s")
    (setq counsel-rg-base-command "rg -M 240 --with-filename --no-heading --line-number --color never --hidden %s"))
#+end_src

*** Icon support for ivy
[[https://github.com/seagle0128/all-the-icons-ivy-rich][=all-the-icons-ivy-rich= provides icons display for ivy]]
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich)
#+end_src

*** Ivy Rich
[[https://github.com/Yevgnen/ivy-rich][=ivy-rich=]] a more friendly interface for ivy.
The package current comes with support for ivy-switch-buffer, counsel-M-x,
counsel-describe-function and counsel-describe-variable, but it should be
easy enough to define your own transformers.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after (ivy counsel)
    :init
    (ivy-rich-mode 1))
#+end_src

** TODO TreEmacs
Look [[https://github.com/Alexander-Miller/treemacs][here]] for the plugin repository
#+begin_src emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      (treemacs-resize-icons 22)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0" . treemacs-select-window)
          ("C-x t 1" . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

#+end_src

*** Treemacs Extensions
#+begin_src emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+end_src

#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+end_src

#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package treemacs-magit
    :after treemacs magit)
#+end_src

** TODO Projectile
Look [[https://github.com/bbatsov/projectile][here]] for the repository
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (when (file-directory-p "~/Documents/programming/projects")
      (setq projectile-project-search-path '("~/Documents/programming/projects")))
    (setq projectile-switch-project-action #'projectile-dired)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode))
#+end_src

*** Counsel-Projectile
Look [[https://github.com/ericdanan/counsel-projectile][here]] for the repository
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** TODO Git Integration

*** MaGit
Look [[https://github.com/maio/magit][here]] for the package repository or [[https://magit.vc][here]] for the site
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Forge
Look [[https://github.com/magit/forge][here]] for the package repository
#+begin_src emacs-lisp
  (use-package forge)
  (setq auth-sources '("~/.config/git/authinfo"))
#+end_src

** Which-Key
Look [[https://github.com/justbur/emacs-which-key][here]] for the repository
#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.9)
    (setq which-key-sort-order 'which-key-prefix-then-key-order)
    (setq which-key-use-C-h-commands t))
#+end_src

** TODO Hydra
Look [[https://github.com/abo-abo/hydra][here]] for the repository
#+begin_src emacs-lisp
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("a" text-scale-adjust "adjust")
    ("f" nil "finished" :exit t))
#+end_src

** TODO General
Look [[https://github.com/noctuid/general.el][here]] for the repository
For now is only for remember, could be useful or deleted
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer mct/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (mct/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale text")))
#+end_src

* Lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

* LaTeX
#+begin_src emacs-lisp
  (use-package lsp-latex
    :init
    (with-eval-after-load 'tex-mode
      (add-hook 'tex-mode-hook 'lsp)
      (add-hook 'latex-mode-hook 'lsp))
    (with-eval-after-load 'bibtex
      (add-hook 'bibtex-mode-hook 'lsp)))
#+end_src

* Org
This is the [[https://orgmode.org/org.pdf][link]] for the org-manual in a pdf format.

** Font Settings
#+begin_src emacs-lisp
  (defun mct/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.35)
                    (org-level-2 . 1.30)
                    (org-level-3 . 1.25)
                    (org-level-4 . 1.20)
                    (org-level-5 . 1.15)
                    (org-level-6 . 1.10)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.00)))
      (set-face-attribute (car face) nil :font "Operator Mono Lig Nerd Font" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code                  nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table                 nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-formula               nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim              nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword       nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line             nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox              nil :inherit 'fixed-pitch))
#+end_src

** Mode Hook
#+begin_src emacs-lisp
  (defun mct/org-mode-setup ()
    (org-indent-mode t)
    (variable-pitch-mode 1)
    (auto-fill-mode t)
    (visual-line-mode 1)
    (setq org-file-apps
          (quote
            ((auto-mode . emacs)
            ("\\.x?html?\\'" . "/usr/bin/vivaldi-stable %s")
            ("\\.pdf\\'" . "/usr/bin/zathura %s")))))
#+end_src

** Mode Settings
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :hook (org-mode . mct/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'split-window-below)
    (setq org-adapt-indentation nil)
    ;; Agenda
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-window-setup 'other-window)
    (setq org-agenda-files
          '("~/Documents/organization/orgmode/Important.org"
            "~/Documents/organization/orgmode/Habits.org"
            "~/Documents/organization/orgmode/Journal.org"
            "~/Documents/organization/orgmode/Metrics.org"
            "~/Documents/organization/orgmode/Notes.org"
            "~/Documents/organization/orgmode/Scratch.org"
            "~/Documents/organization/orgmode/Tasks.org"))
    (setq org-agenda-start-on-weekday 0)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c l") 'org-store-link)
    ;; Todo Items
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "PLANNING(p)" "READY(r)" "ACTIVE(a)" "REVIEWING(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELED(k@)")))
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))
            ("W" "Work Tasks" tags-todo "+work-email")
            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))
            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
    ;; Tags
    (setq org-tag-alist
          '((:startgroup)
            ;; Put mutually exclusive tags here
            (:endgroup)
            ("@home" . ?h)
            ("@work" . ?w)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("note" . ?n)
            ("idea" . ?i)))
    ;; Refiling Targets
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org"   :maxlevel . 1)))
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    ;; Capture Templates
    (setq org-capture-templates

          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documents/organization/orgmode/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("ts" "Clocked Entry Subtask" entry (clock)
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/organization/orgmode/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/organization/orgmode/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documents/organization/orgmode/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Documents/organization/orgmode/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    ;; Font Setup
    (mct/org-font-setup))
#+end_src

*** Org-Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "➠" "➜" "➢")))
#+end_src

*** Org Habits
#+begin_src emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

** Org-Babel

*** Loaded Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (haskell . t)
      (shell . t)))
#+end_src

*** Options
Don't ask for confirmation everytime.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Structure Template
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("tex" . "src tex"))
#+end_src

** Org-Latex
I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Include the =minted= package in all of my LaTeX exports.
#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+end_src

* Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands gfm-mode
    :mode (("\\.md$" . gfm-mode))
    :config
    (custom-set-faces
     '(markdown-pre-face ((t nil))))

  (setq markdown-command "pandoc --standalone --mathjax --from=markdown"
        markdown-fontify-code-blocks-natively t))
#+end_src

* Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)
  (require 'ob-haskell)
  (setq haskell-process-type 'ghci)
  (setq haskell-program-name 'ghci)
#+end_src
